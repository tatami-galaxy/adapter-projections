# -*- coding: utf-8 -*-
"""xlmr_xquad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gRJD2yIp39RYlwuKkbi2xImnV5ZuAPSv
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install git+https://github.com/tatami-galaxy/adapter-projections.git
# !pip install datasets
# !pip install seqeval
# !pip install evaluate
# !pip install accelerate

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# from google.colab import drive
# drive.mount('/content/drive')
# !unzip /content/drive/MyDrive/subspace.zip -d /content/

"""Imports"""

import sys
from transformers import AutoTokenizer, AutoConfig, XLMRobertaAdapterModel, set_seed
from datasets import load_dataset
from torch.utils.data import Dataset
import torch
import torch.nn.functional as F
from tqdm.notebook import tqdm
from torch import nn
import copy
from transformers import AdapterConfig
from datasets import load_dataset
from transformers import TrainingArguments
from transformers import default_data_collator
from transformers import TrainingArguments, AdapterTrainer, EvalPrediction
from datasets import load_metric
import numpy as np
from transformers.adapters.composition import Stack
from torch.utils.data import DataLoader
from torch.optim import AdamW
from transformers import get_scheduler
from tqdm.auto import tqdm
import evaluate
import collections
from accelerate import Accelerator
from logger import Logger

seed = 123
max_length = 384
stride = 128
n_best = 20
max_answer_length = 30
output_dir = './'
log_file = "./Logs/XQUAD/random_30/"

set_seed(seed)


"""
command line params:
1: gpu
2: target lang
3: seed
4: layer
5: prob
"""
gpu_num = sys.argv[1]
tgt = sys.argv[2]
seed = int(sys.argv[3])
proj_layer = int(sys.argv[4])
prob = float(sys.argv[5])
baseline = False
csi = False
random = False

if len(sys.argv) > 6:
    if (sys.argv[6]).lower() == "baseline":
        baseline = True
    elif (sys.argv[6]).lower() == "csi":
        csi = True
    elif (sys.argv[6]).lower() == "random":
        random = True
else:
    baseline = True
            

set_seed(seed)

if not baseline:
    log_file = log_file + "XLMR_csi_src_en_" + "tgt_" + tgt + "_seed_" + str(seed) + "_l_" + str(proj_layer) + "_p_" + str(prob) + ".log"
else:
    log_file = log_file + "XLMR_csi_src_en_" + "tgt_" + tgt + "_seed_" + str(seed) + "_l_" + str(proj_layer) + "_p_" + str(prob) + "_baseline" + ".log"
logger = Logger(log_file)

device = torch.device("cuda:" + gpu_num)
# device = torch.device("cuda")

"""Model"""

model_name = "xlm-roberta-base"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = XLMRobertaAdapterModel.from_pretrained(model_name)

src_lang = "en" 
# tgt_lang = "vi"
tgt_lang = tgt

model.load_adapter_projections([src_lang, tgt_lang], 0.9, './subspace/subspace_cache', device)

# Load the language adapters
lang_adapter_config = AdapterConfig.load("pfeiffer", reduction_factor=2)
model.load_adapter(src_lang+"/wiki@ukp", config=lang_adapter_config) # leave_out=[11])
model.load_adapter(tgt_lang+"/wiki@ukp", config=lang_adapter_config) # leave_out=[11])

# Add a new task adapter
model.add_adapter("xquad")
model.add_qa_head("xquad")

model.train_adapter(["xquad"])

"""Dataset"""

# train on squad
# evaluate on xquad
dataset_src = load_dataset("squad")
# dataset_tgt = load_dataset("xquad", "xquad.vi")
dataset_tgt = load_dataset("xquad", "xquad." + tgt)


# train on squad
# evaluate on xquad
# dataset_src = load_dataset("squad")
# dataset_tgt = load_dataset("xquad", "xquad.hi")


def preprocess_training_examples(examples):
    questions = [q.strip() for q in examples["question"]]
    inputs = tokenizer(
        questions,
        examples["context"],
        max_length=max_length,
        truncation="only_second",
        stride=stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    offset_mapping = inputs.pop("offset_mapping")
    sample_map = inputs.pop("overflow_to_sample_mapping")
    answers = examples["answers"]
    start_positions = []
    end_positions = []

    for i, offset in enumerate(offset_mapping):
        sample_idx = sample_map[i]
        answer = answers[sample_idx]
        start_char = answer["answer_start"][0]
        end_char = answer["answer_start"][0] + len(answer["text"][0])
        sequence_ids = inputs.sequence_ids(i)

        # Find the start and end of the context
        idx = 0
        while sequence_ids[idx] != 1:
            idx += 1
        context_start = idx
        while sequence_ids[idx] == 1:
            idx += 1
        context_end = idx - 1

        # If the answer is not fully inside the context, label is (0, 0)
        if offset[context_start][0] > start_char or offset[context_end][1] < end_char:
            start_positions.append(0)
            end_positions.append(0)
        else:
            # Otherwise it's the start and end token positions
            idx = context_start
            while idx <= context_end and offset[idx][0] <= start_char:
                idx += 1
            start_positions.append(idx - 1)

            idx = context_end
            while idx >= context_start and offset[idx][1] >= end_char:
                idx -= 1
            end_positions.append(idx + 1)

    inputs["start_positions"] = start_positions
    inputs["end_positions"] = end_positions
    return inputs

def preprocess_validation_examples(examples):
    questions = [q.strip() for q in examples["question"]]
    inputs = tokenizer(
        questions,
        examples["context"],
        max_length=max_length,
        truncation="only_second",
        stride=stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    sample_map = inputs.pop("overflow_to_sample_mapping")
    example_ids = []

    for i in range(len(inputs["input_ids"])):
        sample_idx = sample_map[i]
        example_ids.append(examples["id"][sample_idx])

        sequence_ids = inputs.sequence_ids(i)
        offset = inputs["offset_mapping"][i]
        inputs["offset_mapping"][i] = [
            o if sequence_ids[k] == 1 else None for k, o in enumerate(offset)
        ]

    inputs["example_id"] = example_ids
    return inputs
  
train_dataset = dataset_src["train"].map(
    preprocess_training_examples,
    batched=True,
    remove_columns=dataset_src["train"].column_names,
)

validation_dataset = dataset_tgt["validation"].map(
    preprocess_validation_examples,
    batched=True,
    remove_columns=dataset_tgt["validation"].column_names,
)

train_dataset.set_format("torch")
validation_set = validation_dataset.remove_columns(["example_id", "offset_mapping"])
validation_set.set_format("torch")

train_dataloader = DataLoader(
    train_dataset,
    shuffle=True,
    collate_fn=default_data_collator,
    batch_size=16,
)
eval_dataloader = DataLoader(
    validation_set, collate_fn=default_data_collator, batch_size=16
)

metric = evaluate.load("squad")

def compute_metrics(start_logits, end_logits, features, examples):
    example_to_features = collections.defaultdict(list)
    for idx, feature in enumerate(features):
        example_to_features[feature["example_id"]].append(idx)

    predicted_answers = []
    for example in tqdm(examples):
        example_id = example["id"]
        context = example["context"]
        answers = []

        # Loop through all features associated with that example
        for feature_index in example_to_features[example_id]:
            start_logit = start_logits[feature_index]
            end_logit = end_logits[feature_index]
            offsets = features[feature_index]["offset_mapping"]

            start_indexes = np.argsort(start_logit)[-1 : -n_best - 1 : -1].tolist()
            end_indexes = np.argsort(end_logit)[-1 : -n_best - 1 : -1].tolist()
            for start_index in start_indexes:
                for end_index in end_indexes:
                    # Skip answers that are not fully in the context
                    if offsets[start_index] is None or offsets[end_index] is None:
                        continue
                    # Skip answers with a length that is either < 0 or > max_answer_length
                    if (
                        end_index < start_index
                        or end_index - start_index + 1 > max_answer_length
                    ):
                        continue

                    answer = {
                        "text": context[offsets[start_index][0] : offsets[end_index][1]],
                        "logit_score": start_logit[start_index] + end_logit[end_index],
                    }
                    answers.append(answer)

        # Select the answer with the best score
        if len(answers) > 0:
            best_answer = max(answers, key=lambda x: x["logit_score"])
            predicted_answers.append(
                {"id": example_id, "prediction_text": best_answer["text"]}
            )
        else:
            predicted_answers.append({"id": example_id, "prediction_text": ""})

    theoretical_answers = [{"id": ex["id"], "answers": ex["answers"]} for ex in examples]
    return metric.compute(predictions=predicted_answers, references=theoretical_answers)

"""Training"""

optimizer = AdamW(model.parameters(), lr=2e-5)

accelerator = Accelerator(fp16=True)
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)

num_train_epochs = 30
num_update_steps_per_epoch = len(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)

progress_bar = tqdm(range(num_training_steps))

device = torch.device("cuda:" + gpu_num)
model.to(device)

for epoch in range(num_train_epochs):

    # Unfreeze and activate stack setup
    if not baseline:
        model.active_adapters = Stack(src_lang, "xquad")
        if random:
            model.activate_adapter_projection_stack('xquad', proj_layer, tgt_lang, prob)
        if csi:
            model.activate_csi('xquad', proj_layer, tgt_lang)
    else:
        model.disable_adapter_projection_stack()
        model.disable_csi()

    # Training
    model.train()
    for step, batch in enumerate(train_dataloader):
        # batch = batch.to(device)
        batch["input_ids"] = batch["input_ids"].to(device)
        batch["attention_mask"] = batch["attention_mask"].to(device)
        batch["start_positions"] = batch["start_positions"].to(device)
        batch["end_positions"] = batch["end_positions"].to(device)
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        #lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)
        del batch

    lr_scheduler.step()


    # Evaluation
    model.eval()

    if random:
        model.disable_adapter_projection_stack()
    
    if csi:
        model.disable_csi()

    model.active_adapters = Stack(tgt_lang, "xquad")
    start_logits = []
    end_logits = []
    accelerator.print("Evaluation")
    for batch in tqdm(eval_dataloader):
        with torch.no_grad():
            batch["input_ids"] = batch["input_ids"].to(device)
            batch["attention_mask"] = batch["attention_mask"].to(device)
            outputs = model(**batch)

        start_logits.append(accelerator.gather(outputs.start_logits).cpu().numpy())
        end_logits.append(accelerator.gather(outputs.end_logits).cpu().numpy())

    start_logits = np.concatenate(start_logits)
    end_logits = np.concatenate(end_logits)
    start_logits = start_logits[: len(validation_dataset)]
    end_logits = end_logits[: len(validation_dataset)]

    metrics = compute_metrics(
        start_logits, end_logits, validation_dataset, dataset_tgt["validation"]
    )
    # print(f"epoch {epoch}:", metrics)
    logger.write(str(f"epoch {epoch}:" + str(metrics)))
    
    accelerator.wait_for_everyone()
    # unwrapped_model = accelerator.unwrap_model(model)
    # unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
